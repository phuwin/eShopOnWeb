name: eShopOnWeb Build and Test

#Triggers (uncomment line below to use it)
on: workflow_dispatch

#Environment variables https://docs.github.com/en/actions/learn-github-actions/environment-variables
env:
  RESOURCE-GROUP: rg-eshoponweb-eastus
  LOCATION: eastus
  TEMPLATE-FILE: infra/webapp.bicep
  SUBSCRIPTION-ID: c34cfc58-f5ba-4aa3-85f6-39e1256acef9
  WEBAPP-NAME: devops-webapp-eastus-277598071

jobs:
  #Build, test and publish .net web project in repository
  buildandtest:
    runs-on: ubuntu-latest
    steps:
      #checkout the repository
      - uses: actions/checkout@v5
      #prepare runner for desired .net version SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: "9.0.x"
      #Verify .NET version
      - name: Verify .NET version
        run: |
          dotnet --version
          dotnet --info
      #Build/Test/Publish the .net project
      - name: Build with dotnet
        run: dotnet build ./eShopOnWeb.sln --configuration Release
      - name: Test with dotnet
        run: dotnet test ./eShopOnWeb.sln --configuration Release
      - name: dotnet publish
        run: |
          dotnet publish ./src/Web/Web.csproj -c Release -o ${{env.DOTNET_ROOT}}/myapp
          cd ${{env.DOTNET_ROOT}}/myapp
          zip -r ../app.zip .
      # upload the published website code artifacts
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/app.zip

      # upload the bicep template as artifacts for next job
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: bicep-template
          path: ${{ env.TEMPLATE-FILE }}

  # Use Bicep to deploy infrastructure + Publish webapp
  deploy:
    runs-on: ubuntu-latest
    needs: buildandtest
    environment:
      name: "Development"
    steps:
      #Download the publish files created in previous job
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: .net-app

      #Download the bicep templates from previous job
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: bicep-template
          path: bicep-template

      #Login in your azure subscription using a service principal (credentials stored as GitHub Secret in repo)
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Install Bicep CLI
      - name: Install Bicep CLI
        uses: Azure/cli@v2
        with:
          inlineScript: |
            az bicep install

      # Deploy Azure WebApp using Bicep file
      - name: deploy
        uses: Azure/cli@v2
        with:
          inlineScript: |
            az deployment group create \
              --resource-group ${{ env.RESOURCE-GROUP }} \
              --template-file bicep-template/webapp.bicep \
              --parameters webAppName=${{ env.WEBAPP-NAME }} location=${{ env.LOCATION }} \
              --mode Incremental

      # Publish website to Azure App Service (WebApp)
      # Step disabled due to issue where the site sometimes can't be found: https://github.com/microsoft/pipelines-appservice-lib/issues/56. Instead deploy using CLI
      - name: Publish Website to WebApp
        if: false #Disable step due to comment above
        uses: Azure/webapps-deploy@v3
        with:
          type: ZIP
          app-name: ${{ env.WEBAPP-NAME  }}
          package: .net-app/app.zip

      # Publish website to Azure App Service using CLI (WebApp)
      - name: Publish Website to WebApp
        uses: Azure/cli@v2
        timeout-minutes: 15
        with:
          inlineScript: |
            az webapp deploy --name ${{ env.WEBAPP-NAME }} --resource-group ${{ env.RESOURCE-GROUP }} --src-path .net-app/app.zip --type zip

            # Wait for the app to be ready
            echo "Waiting for app to start..."
            az webapp show --name ${{ env.WEBAPP-NAME }} --resource-group ${{ env.RESOURCE-GROUP }} --query "state" -o tsv

            # Check if the app is running
            for i in {1..30}; do
              STATE=$(az webapp show --name ${{ env.WEBAPP-NAME }} --resource-group ${{ env.RESOURCE-GROUP }} --query "state" -o tsv)
              if [ "$STATE" = "Running" ]; then
                echo "App is running successfully!"
                break
              fi
              echo "App state: $STATE, waiting... ($i/30)"
              sleep 10
            done
